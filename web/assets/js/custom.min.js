$(document).ready(function() {

    $(".bs-example-modal-lg").on("shown.bs.modal", function () {
        // using eval to get js variable from string
        var map = eval($("#map_variable").text())
        google.maps.event.trigger(map, "resize");

    });

    window.Event = new Vue();

    /**
     * Category List Vue Component
     */
    Vue.component('category-list', {
        template: `<div>
             <ul class="catalog-categories list-unstyled msg_list">
                <li><a data-toggle="modal" data-target=".bs-example-modal-lg">
                          <span><span>New Category</span></span>
                          <span class="message">Add a new category into the catalog</span>
                    </a>
                </li>
                <category-item v-for="category in categories" :key="category.id" :categoryData="category">
                    <template slot="edit-link">{{category.id}}</template>
                    <template slot="category-title">{{category.title}}</template>
                    <template slot="category-products-length">{{category.products.length}}</template>
                    <template slot="category-description">{{category.description}}</template>
                </category-item>
            </ul>
            </div>`,
        /**
         * Grabs the Data from an attribute on load
         * @returns {{categories}}
         */
        data: function () {
            return {
                categories: JSON.parse(this.categoriesprop)
            }
        },
        props: ['categoriesprop'],
        mounted: function () {
            var that = this;

            Event.$on('updateCategories',function (category) {
                var alreadyExists = false;
                _.forEach(that.categories, function(currentCat,key){

                    if(currentCat.id === category.id){
                        alreadyExists = true;
                        that.categories[key] = category;
                    }
                });

                if(!alreadyExists){
                    that.categories.push(category);
                }
                that.categories =  _.sortBy(that.categories, 'weight');
            });
        }

    })

    /**
     * Vue Component Category List Item
     */
    Vue.component('category-item', {
        props: ['categoryData'],
        methods: {
            updateCategory: function (event) {
                if (event) event.preventDefault()

                axios.get(event.currentTarget.href,config)
                .then(function (response) {
                    $('.edit-modal').html(response.data.template);
                    $('.edit-modal').modal('show');
                    // edit-category
                    $( ".modal-dialog" ).on( "click", "#edit-category", function(event) {
                        app.categoryEditSubmit(event);
                    });

                })
                .catch(function (error) {
                    alert("Something went wrong. Please try again.")
                });
            }
        },
        template: `
        <li>
            <a :href="'/app_dev.php/backend/catalog/ajaxCategoryEdit/' + this.categoryData.id" v-on:click="updateCategory">       
            <span>
                <span><slot name="category-title"></slot></span>
                <span class="time"><slot name="category-products-length"></slot></span>
            </span>
               <span class="message"><slot name="category-description"></slot></span>
            </a>
        </li>`
    })

    var config = {
        headers: {'X-Requested-With': 'XMLHttpRequest'},
    };

    var app = new Vue({
        el: '.container',
        delimiters: ['${', '}'],
        data: {
            message: 'Hello Vue!',
            listJson: []
        },
        methods: {
            categorySubmit: function (event) {
                if (event) event.preventDefault()
                $('.ajaxCategoryAdd').parsley().validate();
                if (true === $('.ajaxCategoryAdd').parsley().isValid()) {
                    this.saveData('ajaxCategoryAdd');
                }
            },
            categoryEditSubmit: function (event) {
                if (event) event.preventDefault()
                $('.ajaxCategoryEdit').parsley().validate();
                if (true === $('.ajaxCategoryEdit').parsley().isValid()) {
                    this.saveData('ajaxCategoryEdit');

                }
            },
            saveData: function (formClass) {
                formClass = '.' + formClass;
                url = $(formClass).attr('action');

                $('.glyphicon-refresh-animate').show();
                var that = this;

                axios.post(
                    url, $(formClass).serialize(),
                    config
                )
                .then(function (response) {
                    Event.$emit('updateCategories', JSON.parse(response.data.category));
                    $('.modal').modal('hide');
                    $(formClass).trigger('reset');
                    $('.glyphicon-refresh-animate').hide();

                })
                .catch(function (error) {

                });
            }
        }
    })
});
